{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/antoineluta/Documents/GitHub/photolangage/components/home/PostList/FirstParagraph.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { RichText } from 'prismic-reactjs';\n/**\r\n * Component that returns the first paragraph of a post\r\n */\n\nvar FirstParagraph = function FirstParagraph(_ref) {\n  var sliceZone = _ref.sliceZone,\n      _ref$textLimit = _ref.textLimit,\n      textLimit = _ref$textLimit === void 0 ? 300 : _ref$textLimit;\n  // Find the first text slice of post's body\n  var firstTextSlice = sliceZone.find(function (slice) {\n    return slice.slice_type === 'text';\n  });\n\n  if (firstTextSlice) {\n    var text = RichText.asText(firstTextSlice.primary.text);\n    var limitedText = text.substring(0, textLimit);\n\n    if (text.length > textLimit) {\n      // Cut only up to the last word and attach '...' for readability\n      limitedText = \"\".concat(limitedText.substring(0, limitedText.lastIndexOf(' ')), \"...\");\n    }\n\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }, limitedText);\n  } // If there are no slices of type 'text', return nothing\n\n\n  return null;\n};\n\n_c = FirstParagraph;\nexport default FirstParagraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirstParagraph\");","map":{"version":3,"sources":["/Users/antoineluta/Documents/GitHub/photolangage/components/home/PostList/FirstParagraph.js"],"names":["React","RichText","FirstParagraph","sliceZone","textLimit","firstTextSlice","find","slice","slice_type","text","asText","primary","limitedText","substring","length","lastIndexOf"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;;;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAoC;AAAA,MAAjCC,SAAiC,QAAjCA,SAAiC;AAAA,4BAAtBC,SAAsB;AAAA,MAAtBA,SAAsB,+BAAV,GAAU;AACzD;AACA,MAAMC,cAAc,GAAGF,SAAS,CAACG,IAAV,CAAe,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,UAAN,KAAqB,MAAzB;AAAA,GAApB,CAAvB;;AAEA,MAAIH,cAAJ,EAAoB;AAClB,QAAMI,IAAI,GAAGR,QAAQ,CAACS,MAAT,CAAgBL,cAAc,CAACM,OAAf,CAAuBF,IAAvC,CAAb;AACA,QAAIG,WAAW,GAAGH,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBT,SAAlB,CAAlB;;AAEA,QAAIK,IAAI,CAACK,MAAL,GAAcV,SAAlB,EAA6B;AAC3B;AACAQ,MAAAA,WAAW,aAAMA,WAAW,CAACC,SAAZ,CAAsB,CAAtB,EAAyBD,WAAW,CAACG,WAAZ,CAAwB,GAAxB,CAAzB,CAAN,QAAX;AACD;;AAED,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIH,WAAJ,CAAP;AACD,GAdwD,CAgBzD;;;AACA,SAAO,IAAP;AACD,CAlBD;;KAAMV,c;AAoBN,eAAeA,cAAf","sourcesContent":["import React from 'react'\r\nimport { RichText } from 'prismic-reactjs'\r\n\r\n/**\r\n * Component that returns the first paragraph of a post\r\n */\r\nconst FirstParagraph = ({ sliceZone, textLimit = 300 }) => {\r\n  // Find the first text slice of post's body\r\n  const firstTextSlice = sliceZone.find(slice => slice.slice_type === 'text')\r\n\r\n  if (firstTextSlice) {\r\n    const text = RichText.asText(firstTextSlice.primary.text)\r\n    let limitedText = text.substring(0, textLimit)\r\n\r\n    if (text.length > textLimit) {\r\n      // Cut only up to the last word and attach '...' for readability\r\n      limitedText = `${limitedText.substring(0, limitedText.lastIndexOf(' '))}...`\r\n    }\r\n    \r\n    return <p>{limitedText}</p>\r\n  }\r\n\r\n  // If there are no slices of type 'text', return nothing\r\n  return null\r\n}\r\n\r\nexport default FirstParagraph\r\n"]},"metadata":{},"sourceType":"module"}